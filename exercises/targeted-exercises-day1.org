* Objectives

The learning targets of this exercise:

- Check R and RStudio 
- Setup a project with targets.
- Naming conventions.
- Work with an existing targets-project.

----------------------------------------------------------------------

** Exercise 1: Warm-up

*** System 

The exercises for this course were developed using R version =4.2.1=
and RStudio version =2022.07.2+576=. The versions of the most
important R-packages are:

#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache yes
course_packages  <- c("targets","data.table","ranger","glmnet","Publish","lava","riskRegression","matrixStats")
nix=lapply(course_packages,function(p){
  v=packageVersion(p)
  cat(paste(p,":",v,"\n"))
})
#+END_SRC

: targets : 0.13.5 
: data.table : 1.14.6 
: ranger : 0.14.1 
: glmnet : 4.1.4 
: Publish : 2022.4.3 
: lava : 1.6.10 
: riskRegression : 2022.11.28 
: matrixStats : 0.62.0

You may have different versions installed and this is useful
knowlegde. If at some point the exercises do not work as expected it
may be due to a different version of the software.

**** Check your R version 

In the R console execute the following command

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
version
#+END_SRC  
  
**** Check your  R-studio version

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
Rstudio -> Help -> About Rstudio
#+END_SRC

**** Install packages/check package versions
#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes
nix <- lapply(course_packages,function(p){
  if (!do.call(require,list(package=p,quietly=TRUE))){
    install.packages(package=p)
  }
  do.call(library,list(package=p,quietly=TRUE,warn.conflicts=FALSE))
  packageVersion(pkg=p)
})
#+END_SRC

*** Systemics 

**** .RData
Experienced R-studio users may have done this already and can skip
this exercise. To avoid that large register data are unpurposely saved or loaded
when you exit or enter the R-session in RStudio open the RStudio menu

=Tools -> Global options=

and

1. uncheck the save .RData into workspace at startup
2. set the save workspace to .RData on exit to =Never= 

  [[./rstudio-save-Rdata-never.png]]

**** Projects

For the exercises, we expect all students to work with RStudio
projects, see https://r4ds.had.co.nz/workflow-projects.html.  Each
student needs to create the specific RStudio projects for the
exercises as follows:

1. Download from github and extract files (see detailed instructions in Exercise 2)
2. Create new project using the RStudio =new project= dialog
   - Existing directory 
   - Project name (see detailed instructions in Exercise 2)


**** OPTIONAL: RStudio search functions

RStudio has quite remarkable search/find functions, including
- =Control-Shift-f=
- =Control-.=
- =F2= when cursor is on a function name

See https://support.posit.co/hc/en-us/articles/200710523-Navigating-Code-in-the-RStudio-IDE

**** OPTIONAL: Leaving humanreadible traces

When inspecting other peoples code it is quite useful to know who
started the project and when. Unfortunately, no one has time to do
this. Luckily RStudio allows you to define automatic headers:

https://www.rdataguy.com/2019/11/lesson-7-creating-rscript-header_11.html

**** OPTIONAL: Lazy coder

R-syntax is difficult to remember ...
- 
- dput inserts code in R-code syntax, such as names of dataset or levels of a factor:

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
library(survival)
dput(names(pbc))
dput(unique(pbc$edema))
#+END_SRC  
  
- Publish::lazyFactorCoding

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
d <- data.table(a=rep(1:3,4),
                b=letters[1:2],
                adate=paste0("15-",8:11,"-2020"),
                bdate=paste0(8:11,"-15","-2020"))
lazyFactorCoding(d)
lazyDateCoding(d,pattern="date")
#+END_SRC  



----------------------------------------------------------------------

** Exercise 2: Targeted projects

*** Download all files from github

**** As a zip file

https://github.com/tagteam/registerTargets/archive/refs/heads/main.zip

*** Create RStudio projects

Using the RStudio dialog ='New project'= to create projects in the
following three subfolders:
1. =exercises/nuts=
2. =exercises/pro_ami=
3. =exercises/pro_stat=

----------------------------------------------------------------------

** Exercise 3: The structure of a minimal targets project

- Switch to RStudio project 'nuts' (e.g., via recent projects)
- Open the file =_targets.R= (e.g., via "Control-Shift f" eller "Control .") 
- Read the file =_targets.R=
- Open and run the file =run_targets.R=
- Answer the following question:

 /What is the ratio of the maximum female age and the maximum male age?/    

----------------------------------------------------------------------

** Exercise 4: Modifying an existing targets project

This exercise uses the project defined by the folder ='nuts'= which
obviously is short for ='nutshell'=. Given that you have suceeded with
Exercise 2, you should now switch to the RStudio project 'nuts'.

*** Initial status of the project 

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
tar_load(table1)
#+END_SRC

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
tar_manifest()
#+END_SRC

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
tar_outdated()
#+END_SRC

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
tar_make()
#+END_SRC

*** Changing the code 

- Open the file =functions/get_study_pop.R= (i.e., put cursor on
  function name and press F2). Find the comment # exclusion criteria and enter the following 
  line

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
study_pop[index >= study_start]
#+END_SRC

- Save the file (Control-s)
- run the following commands

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
tar_outdated()
#optional: tar_visnetwork()
tar_make()
#+END_SRC  








