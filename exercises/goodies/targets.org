* The R-package targets

The R package =targets= has many features and the following potentials for register data research projects:

- pipeline: from reading of raw data to tables and figures, it is made explicitly clear in which order the steps of the analysis are executed and how they depend on each other
- reproducibility: all results are reproducible including the random ones, e.g., bootstrap or simulation
- efficiency: it is easy to load previously run data or results  

The main source of information is the online manual:

https://github.com/ropensci/targets

** The _targets.R file

A targets project is defined by an R-script called =_targets.R=. The
R-script file can have any other name but =_targets.R= is the default.
The =_targets.R= file contains the pipeline.

** Before the pipeline

Functions that the project is using are best outsourced in separate
files. If is useful if an R-function called 'get_data' is defined in a
file called =get_data.R=, and similarly the function 'analyse_data' is
defined in a file called =analyse_data.R=. Because then it is easy to
find the functions. Files that define functions are best defined in
one or several sub-folders of the project. The name(s) of the
folder(s) can have different names according to the users taste for
names. The following example code assumes that all R-code files are
saved in a folder called ="functions/"=

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes
library(targets)
tar_source("functions")
tar_option_set(packages=c("data.table","heaven","prodlim","survival","riskRegression","ranger","ggplot2","glmnet","matrixStats","lava","Publish"))
#+END_SRC

** The targets

A target is an R-object which consists of a name, a value, and other
parameters such as =packages= which loads additional packages only for
this target:

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  :eval never
tar_target(name,{
  # the body of the target
  # can consist multiple lines
  # the value is what the last line returns
  # can also be the call to a function
  value 
},packages="dplyr")
#+END_SRC

** The pipeline

The targets pipeline is a list of targets. The targets can be pre-defined
like 'SAMPLE_SIZE' and BARPLOT above or defined directly in the pipeline (in which case
target does not have an R-object name). Targets that occur later in the pipleline,
i.e., the following list, may depend on targets that occur earlier in the pipeline,
e.g., the target BARPLOT can refer to the target names 'data' and 'cbPalette' 

The pipeline is a list of targets:

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  :eval never
list(
  tar_target(target1,{
    depends on no other targets
  }),
  tar_target(target2,{
    may depend on target1
  }),
  tar_target(target3,{
    may depend on target1 or on target2 or on both
  })
)
#+END_SRC

** Commands

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  :eval never
#
# show the pipeline
#
tar_manifest()
tar_visnetwork(targets_only=TRUE)
tar_outdated()
#
# evaluate the pipeline
#
# run all targets of the pipeline (which need to be run)
tar_make()
# run target2 (if it needs to be run) and all targets on which target2 depends
tar_make(target2)
# run target2 directly without checking other targets
tar_make(target2,shortcut=TRUE)
#
# load/read objects
#
tar_load(target2)
t2 <- tar_read(target2)
tar_load(everything)
#
# delete targets
#
tar_delete(target2)
# delete all targets
tar_destroy()
# delete targets that are not in the current pipeline, i.e., obsolete
tar_prune()
#+END_SRC

** Behind the scene

When the pipeline is executed via =tar_make()= the targets are saved
in the subfolder =_targets/objects= of the current project directory.
The files =_targets/meta/progress=, =_targets/meta/process= and
=_targets/meta/meta= provide information about the targets. The latter
can be read into R as follows:

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  :eval never
tar_meta()
tar_meta(fields=c("type","seed","time","size","warnings"))
#+END_SRC

** Controlling dependencies
#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
tar_target(name,{body},cue = tar_cue(mode = "never"))
tar_target(name,{body},cue = tar_cue(mode = "always"))
#+END_SRC

** Trouble shooting

Using =targets= makes it generally more difficult
  to identify why/where the error/warning is coming from. To be prepared:
  + Note that =tar_make()= runs the file =_targets.R= by default in a fresh clean R
    session. Hence, (syntax) errors can appear in one of the functions
    that are sourced in the beginning of the file =_targets.R=
  + Note that when a warning occurs you can temporarily turns warnings into
    errors, via =options(warn=2)= such that =traceback()= can help to identify where the warning is coming from.  
  + When an error occurs in a specific target, you can load the
    objects that this target depends on, either manually or using
    =tar_load_everything()=.  Once all dependencies are loaded you can
    evaluate the target which has an error line by line. To make this an easy procedure, it
    it recommended to match the name of the arguments of the functions with their values such that
    the =_targets.R= looks like this 
#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  :eval never
    ...,
    tar_target(como, {
      get_como(study_pop=study_pop, icd_codes=icd_codes)
    },
    tar_target(table1, {
      get_table1(study_pop=study_pop, como=como)
    },
    ...
#+END_SRC    
  It is also recommended to save a function with a specific name in a
  file =functions/name.R=, e.g., the function =get_como= is saved in the file
  called =get_como.R= to make it easy to find the code.
  + Example of an error in the pipeline: Add the following line in the file =functions/this.R= inside the
  definition =(1=2)=. Note that this is a syntax error. Then run =tar_make()= and see what happens,
  i.e., consider the error message. You may follow the suggestion of the error message:
  
 Tips: https://books.ropensci.org/targets/debugging.html

 and here in particular look into Sections 3.4 'Error messages' and 3.5 'Functions'. You will learn that
 a good place to start looking is the file =_targets/meta/meta=. It is convenient to read this file with
 R:
 #+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
 #+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
  tar_meta(fields = c("warnings","error"))
 #+END_SRC



